import requests
import datetime
from telebot import TeleBot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler
import pytz
import os
from dotenv import load_dotenv


load_dotenv()

API_KEY = os.getenv("API_KEY")
TOKEN = os.getenv("TOKEN")

DANGER_UVINDEX = 3
user_cities = {}
bot = TeleBot(TOKEN)

@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
    btn2 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id,"–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å:", reply_markup=markup)

    bot.send_message(message.chat.id, "–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–µ–∑–∑–≤—É—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É –æ 9:00 (–ú–æ–∂–ª–∏–≤–æ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∞–≤—Ç–æ—Ä –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä)")

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
def handle_today_weather(message):
    date = datetime.date.today()
    city = user_cities.get(message.chat.id, "Lviv,UA")

    day_weather = get_weather_by_hours_for_day_from_api(date=date, city=city)
    dangerous_hours = get_dangerous_hours(weather_by_hour=day_weather)

    bot.send_message(message.chat.id, f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {date} –¥–ª—è {city}:")

    final_message = ""
    for hour_data in dangerous_hours:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á —ñ–∑ —á–∞—Å–æ–º: –∞–±–æ "DANGER time", –∞–±–æ "time"
        time_key = "DANGER time" if "DANGER time" in hour_data else "time"
        time = hour_data[time_key]
        uv = hour_data["uvindex"]
        temp = hour_data["temperature"]

        if time_key == "DANGER time":
            final_message += f"‚ö†Ô∏è {time} - –£–§-—ñ–Ω–¥–µ–∫—Å: {uv}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        else:
            final_message += f"{time} - –£–§-—ñ–Ω–¥–µ–∫—Å: {uv}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"

    bot.send_message(message.chat.id, final_message)

@bot.message_handler(func=lambda message: message.text == "–û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
def choose_city(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn3 = types.KeyboardButton("–õ—å–≤—ñ–≤")
    btn4 = types.KeyboardButton("–ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫")
    markup.add(btn3, btn4)
    bot.send_message(message.chat.id, "–û–±–µ—Ä–∏ —Å–≤–æ—î –º—ñ—Å—Ç–æ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–õ—å–≤—ñ–≤" or message.text == "–ù–æ–≤–æ–≤–æ–ª–∏–Ω—Å—å–∫")
def change_city(message):
    if (message.text == "–õ—å–≤—ñ–≤"):
        user_cities[message.chat.id] = "Lviv,UA"
    else:
        user_cities[message.chat.id] = "Novovolynsk,UA"

    bot.send_message(message.chat.id, f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {message.text}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
    btn2 = types.KeyboardButton("–û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
    markup.add(btn1, btn2)

    bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—é —Ç–µ–±–µ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëá", reply_markup=markup)

def send_daily_weather():
    for chat_id, city in user_cities.items():
        date = datetime.date.today()
        day_weather = get_weather_by_hours_for_day_from_api(date=date, city=city)
        dangerous_hours = get_dangerous_hours(weather_by_hour=day_weather)

        final_message = f"–ü–æ–≥–æ–¥–∞ –Ω–∞ {date} –¥–ª—è {city}:\n\n"
        for hour_data in dangerous_hours:
            time_key = "DANGER time" if "DANGER time" in hour_data else "time"
            time = hour_data[time_key]
            uv = hour_data["uvindex"]
            temp = hour_data["temperature"]

            if time_key == "DANGER time":
                final_message += f"‚ö†Ô∏è {time} ‚Äî –£–§-—ñ–Ω–¥–µ–∫—Å: {uv}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            else:
                final_message += f"{time} ‚Äî –£–§-—ñ–Ω–¥–µ–∫—Å: {uv}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"

        bot.send_message(chat_id, final_message, disable_notification=True)


def get_weather_by_hours_for_day_from_api(*, date: str, city: str) -> list[dict]:
    url=f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}/{date}/{date}?key={API_KEY}"
    response = requests.get(url)


    weather_by_days = response.json()["days"]
    weather_by_hours = weather_by_days[0]["hours"]
    return weather_by_hours

def get_dangerous_hours (*, weather_by_hour: list[dict]) -> list[dict]:
    dangerous_hours = []
    for weather in weather_by_hour:
        uvindex = weather["uvindex"]
        time = weather["datetime"]
        celsius_temperature = fahrenheit_to_celsius(fahrenheit_temperature=weather["temp"])
        if uvindex >= DANGER_UVINDEX:
            dangerous_hours.append({"DANGER " "time": time, "uvindex": uvindex, "temperature": celsius_temperature})
        else:
            dangerous_hours.append({"time": time, "uvindex": uvindex, "temperature": celsius_temperature})

    return dangerous_hours

def fahrenheit_to_celsius(*, fahrenheit_temperature: float) -> int:
    return round((fahrenheit_temperature - 32) * 5 / 9)


scheduler = BackgroundScheduler(timezone=pytz.timezone('Europe/Kyiv'))

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é send_daily_weather —â–æ–¥–Ω—è –æ 9:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
scheduler.add_job(send_daily_weather, 'cron', hour=19, minute=14)
scheduler.start()


bot.infinity_polling()